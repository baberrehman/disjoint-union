@inproceedings{oliveira2016disjoint,
  title={Disjoint intersection types},
  author={Oliveira, Bruno C d S and Shi, Zhiyuan and Alpuim, Joao},
  booktitle={Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming},
  pages={364--377},
  year={2016}
}

@InProceedings{CliftonLCM2000,
author = {Clifton, Curtis and Leavens, Gary T. and Chambers, Craig and Millstein, Todd},
title = {MultiJava: Modular Open Classes and Symmetric Multiple Dispatch for Java},
year = {2000},
booktitle = {Proceedings of the 15th ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications},
pages = {130–145},
numpages = {16},
series = {OOPSLA '00}
}

@InCollection{Chambers92,
  Key =		"Chambers",
  Author =	"Craig Chambers",
  Title =	"Object-Oriented Multi-Methods in {Cecil}",
  BookTitle = 	"ECOOP '92, European Conference on Object-Oriented Programming,
		 Utrecht, The Netherlands",
  Publisher = 	"Springer-Verlag",
  Year = 	1992,
  Editor = 	"Ole Lehrmann Madsen",
  Series = 	LNCS,
  Address = 	NY,
  Volume =      615,
  Pages =	"33-56",
  Annote = 	"40 references"
}

@InProceedings{bi_et_al:LIPIcs:2018:9227,
  author =	{Bi, Xuan and Oliveira, Bruno C. d. S. and Schrijvers, Tom},
  title =	{{The Essence of Nested Composition}},
  booktitle =	{European Conference on Object-Oriented Programming  (ECOOP)},
  year =	{2018},
}

@inproceedings{alpuimdisjoint,
  title={Disjoint Polymorphism},
  author={Alpuim, Jo{\~a}o and Oliveira, Bruno C. d. S. and Shi, Zhiyuan},
  booktitle = {European Symposium on Programming (ESOP)},
  year={2017}
}

@article{ DBLP:journals/toplas/IgarashiPW01,
  author    = {Atsushi Igarashi and Benjamin C. Pierce and Philip Wadler},
  title     = {Featherweight Java: a minimal core calculus for Java and GJ},
  journal   = {ACM Trans. Program. Lang. Syst.},
  pages   = {396-450},
  volume   = {23},
  number   = {3},
  ee   = {http://doi.acm.org/10.1145/503502.503505} ,
  year   = {2001}
}

@InProceedings{nieto20nulls,
  author =	{Abel Nieto and Yaoyu Zhao and Ondřej Lhot{\'a}k and Angela Chang and Justin Pu},
  title =	{{Scala with Explicit Nulls}},
  booktitle =	{34th European Conference on Object-Oriented Programming (ECOOP 2020)},
  pages =	{25:1--25:26},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  year =	{2020}
}

@techreport{ hope,
    AUTHOR = "R. M. Burstall and D. B. MacQueen and D. T. Sannella",
    TITLE = "HOPE: An experimental applicative Language",
    INSTITUTION = "Computer Science Dept, Univ. of Edinburgh",
    NUMBER = "CSR-62-80",
    YEAR = 1981
    }

@inproceedings{ garrigue98,
author = {Jacques Garrigue},
title = {Programming with polymorphic variants},
booktitle = {{ML} workshop},
year = {1998} 
}

@inproceedings{macqueen1984ideal,
  title={An ideal model for recursive polymorphic types},
  author={MacQueen, David and Plotkin, Gordon and Sethi, Ravi},
  booktitle={Proceedings of the 11th ACM SIGACT-SIGPLAN symposium on Principles of programming languages},
  pages={165--174},
  year={1984}
}

@techreport{pierce1991programming,
  title={Programming with intersection types, union types},
  author={Pierce, Benjamin C},
  year={1991},
  institution={and polymorphism. Technical Report CMU-CS-91-106, Carnegie Mellon University}
}

@article{barbanera1995intersection,
  title={Intersection and union types: syntax and semantics},
  author={Barbanera, Franco and Dezaniciancaglini, Mariangiola and Deliguoro, Ugo},
  journal={Information and Computation},
  volume={119},
  number={2},
  pages={202--230},
  year={1995},
  publisher={Elsevier}
}

@article{muehlboeck2018empowering,
  title={Empowering union and intersection types with integrated subtyping},
  author={Muehlboeck, Fabian and Tate, Ross},
  journal={Proceedings of the ACM on Programming Languages},
  volume={2},
  number={OOPSLA},
  pages={1--29},
  year={2018},
  publisher={ACM New York, NY, USA}
}

@inproceedings{freeman1991refinement,
  title={Refinement types for ML},
  author={Freeman, Tim and Pfenning, Frank},
  booktitle={Proceedings of the ACM SIGPLAN 1991 conference on Programming language design and implementation},
  pages={268--277},
  year={1991}
}

@article{hosoya2003xduce,
  title={XDuce: A statically typed XML processing language},
  author={Hosoya, Haruo and Pierce, Benjamin C},
  journal={ACM Transactions on Internet Technology (TOIT)},
  volume={3},
  number={2},
  pages={117--148},
  year={2003},
  publisher={ACM New York, NY, USA}
}

@article{benzaken2003cduce,
  title={CDuce: an XML-centric general-purpose language},
  author={Benzaken, V{\'e}ronique and Castagna, Giuseppe and Frisch, Alain},
  journal={ACM SIGPLAN Notices},
  volume={38},
  number={9},
  pages={51--63},
  year={2003},
  publisher={ACM New York, NY, USA}
}

@article{fallside2001xml,
  title={XML Schema Part 0: Primer, W3C Recommendation},
  author={Fallside, David C},
  journal={http://www. w3. org/TR/xmlschema-0},
  year={2001}
}

@article{dunfield2014elaborating,
  title={Elaborating intersection and union types},
  author={Dunfield, Joshua},
  journal={Journal of Functional Programming},
  volume={24},
  number={2-3},
  pages={133--165},
  year={2014},
  publisher={Cambridge University Press}
}

@article{castagna2017gradual,
  title={Gradual typing with union and intersection types},
  author={Castagna, Giuseppe and Lanvin, Victor},
  journal={Proceedings of the ACM on Programming Languages},
  volume={1},
  number={ICFP},
  pages={1--28},
  year={2017},
  publisher={ACM New York, NY, USA}
}

@article{coppo1981functional,
  title={Functional characters of solvable terms},
  author={Coppo, Mario and Dezani-Ciancaglini, Mariangiola and Venneri, Betti},
  journal={Mathematical Logic Quarterly},
  volume={27},
  number={2-6},
  pages={45--58},
  year={1981},
  publisher={Wiley Online Library}
}

@article{pottinger1980type,
  title={A type assignment for the strongly normalizable $\lambda$-terms},
  author={Pottinger, Garrel},
  journal={To HB Curry: essays on combinatory logic, lambda calculus and formalism},
  pages={561--577},
  year={1980},
  publisher={Citeseer}
}

@article{reynolds1988preliminary,
  title={Preliminary design of the programming language Forsythe},
  author={Reynolds, John C},
  year={1988}
}

@article{tobin2008design,
  title={The design and implementation of Typed Scheme},
  author={Tobin-Hochstadt, Sam and Felleisen, Matthias},
  journal={ACM SIGPLAN Notices},
  volume={43},
  number={1},
  pages={395--406},
  year={2008},
  publisher={ACM New York, NY, USA}
}

@article{castagna2019revisiting,
  title={Revisiting Occurrence Typing},
  author={Castagna, Giuseppe and Lanvin, Victor and Laurent, Micka{\"e}l and Nguyen, Kim},
  journal={arXiv preprint arXiv:1907.05590},
  year={2019}
}

@inproceedings{wadler1989make,
  title={How to make ad-hoc polymorphism less ad hoc},
  author={Wadler, Philip and Blott, Stephen},
  booktitle={Proceedings of the 16th ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  pages={60--76},
  year={1989}
}

@article{castagna1995calculus,
  title={A calculus for overloaded functions with subtyping},
  author={Castagna, Giuseppe and Ghelli, Giorgio and Longo, Giuseppe},
  journal={Information and Computation},
  volume={117},
  number={1},
  pages={115--135},
  year={1995},
  publisher={Elsevier}
}

@article{cardelli1985understanding,
  title={On understanding types, data abstraction, and polymorphism},
  author={Cardelli, Luca and Wegner, Peter},
  journal={ACM Computing Surveys (CSUR)},
  volume={17},
  number={4},
  pages={471--523},
  year={1985},
  publisher={ACM New York, NY, USA}
}

@article{stuckey2005theory,
  title={A theory of overloading},
  author={Stuckey, Peter J and Sulzmann, Martin},
  journal={Acm transactions on programming languages and systems (toplas)},
  volume={27},
  number={6},
  pages={1216--1269},
  year={2005},
  publisher={ACM New York, NY, USA}
}

@InProceedings{Huang:typedirected,
  author =	{Huang, Xuejing and Oliveira, Bruno C. d. S.},
  title =	{{A Type-Directed Operational Semantics For a Calculus with a Merge Operator}},
  booktitle =	{34th European Conference on Object-Oriented Programming (ECOOP 2020)},
  pages =	{26:1--26:32},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-95977-154-2},
  ISSN =	{1868-8969},
  year =	{2020},
  volume =	{166},
  editor =	{Robert Hirschfeld and Tobias Pape},
  publisher =	{Schloss Dagstuhl--Leibniz-Zentrum f{\"u}r Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{https://drops.dagstuhl.de/opus/volltexte/2020/13183},
  URN =		{urn:nbn:de:0030-drops-131832},
  doi =		{10.4230/LIPIcs.ECOOP.2020.26},
  annote =	{Keywords: operational semantics, type systems, intersection types}
}

@INPROCEEDINGS{Siek06gradualtyping,
    author = {Jeremy G. Siek and Walid Taha},
    title = {Gradual Typing for Functional Languages},
    booktitle = {IN SCHEME AND FUNCTIONAL PROGRAMMING WORKSHOP},
    year = {2006},
    pages = {81--92},
    publisher = {}
}

@article{pierce2000local,
  title={Local type inference},
  author={Pierce, Benjamin C and Turner, David N},
  journal={ACM Transactions on Programming Languages and Systems (TOPLAS)},
  volume={22},
  number={1},
  pages={1--44},
  year={2000},
  publisher={ACM New York, NY, USA}
}

@inproceedings{davies2000intersection,
  title={Intersection types and computational effects},
  author={Davies, Rowan and Pfenning, Frank},
  booktitle={Proceedings of the fifth ACM SIGPLAN international conference on Functional programming},
  pages={198--208},
  year={2000}
}

@article{barendregt1983filter,
  title={A filter lambda model and the completeness of type assignment},
  author={Barendregt, Henk and Coppo, Mario and Dezani-Ciancaglini, Mariangiola},
  journal={The journal of symbolic logic},
  volume={48},
  number={4},
  pages={931--940},
  year={1983},
  publisher={JSTOR}
}

@inproceedings{dunfield2003type,
  title={Type assignment for intersections and unions in call-by-value languages},
  author={Dunfield, Joshua and Pfenning, Frank},
  booktitle={International Conference on Foundations of Software Science and Computation Structures},
  pages={250--266},
  year={2003},
  organization={Springer}
}

@inproceedings{frisch2002semantic,
  title={Semantic subtyping},
  author={Frisch, Alain and Castagna, Giuseppe and Benzaken, V{\'e}ronique},
  booktitle={Proceedings 17th Annual IEEE Symposium on Logic in Computer Science},
  pages={137--146},
  year={2002},
  organization={IEEE}
}

@inproceedings{castagna2005gentle,
  title={A gentle introduction to semantic subtyping},
  author={Castagna, Giuseppe and Frisch, Alain},
  booktitle={Proceedings of the 7th ACM SIGPLAN international conference on Principles and practice of declarative programming},
  pages={198--199},
  year={2005}
}

@article{frisch2008semantic,
  title={Semantic subtyping: Dealing set-theoretically with function, union, intersection, and negation types},
  author={Frisch, Alain and Castagna, Giuseppe and Benzaken, V{\'e}ronique},
  journal={Journal of the ACM (JACM)},
  volume={55},
  number={4},
  pages={1--64},
  year={2008},
  publisher={ACM New York, NY, USA}
}

@inproceedings{tobin2010logical,
  title={Logical types for untyped languages},
  author={Tobin-Hochstadt, Sam and Felleisen, Matthias},
  booktitle={Proceedings of the 15th ACM SIGPLAN international conference on Functional programming},
  pages={117--128},
  year={2010}
}

@inproceedings{Tobin:typedscheme,
author = {Tobin-Hochstadt, Sam and Felleisen, Matthias},
title = {The Design and Implementation of Typed Scheme},
year = {2008},
isbn = {9781595936899},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1328438.1328486},
doi = {10.1145/1328438.1328486},
abstract = {When scripts in untyped languages grow into large programs, maintaining them becomes difficult. A lack of types in typical scripting languages means that programmers must (re)discover critical pieces of design information every time they wish to change a program. This analysis step both slows down the maintenance process and may even introduce mistakes due to the violation of undiscovered invariants.This paper presents Typed Scheme, an explicitly typed extension of an untyped scripting language. Its type system is based on the novel notion of occurrence typing, which we formalize and mechanically prove sound. The implementation of Typed Scheme additionally borrows elements from a range of approaches, including recursive types, true unions and subtyping, plus polymorphism combined with a modicum of local inference. Initial experiments with the implementation suggest that Typed Scheme naturally accommodates the programming style of the underlying scripting language, at least for the first few thousand lines of ported code.},
booktitle = {Proceedings of the 35th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
pages = {395–406},
numpages = {12},
keywords = {type systems, scheme},
location = {San Francisco, California, USA},
series = {POPL '08}
}

@inproceedings{castagna:settheoretic,
author = {Castagna, Giuseppe and Nguyen, Kim and Xu, Zhiwu and Im, Hyeonseung and Lenglet, Sergue\"{\i} and Padovani, Luca},
title = {Polymorphic Functions with Set-Theoretic Types: Part 1: Syntax, Semantics, and Evaluation},
year = {2014},
isbn = {9781450325448},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2535838.2535840},
doi = {10.1145/2535838.2535840},
abstract = {This article is the first part of a two articles series about a calculus with higher-order polymorphic functions, recursive types with arrow and product type constructors and set-theoretic type connectives (union, intersection, and negation).In this first part we define and study the explicitly-typed version of the calculus in which type instantiation is driven by explicit instantiation annotations. In particular, we define an explicitly-typed lambda-calculus with intersection types and an efficient evaluation model for it. In the second part, presented in a companion paper, we define a local type inference system that allows the programmer to omit explicit instantiation annotations, and a type reconstruction system that allows the programmer to omit explicit type annotations.The work presented in the two articles provides the theoretical foundations and technical machinery needed to design and implement higher-order polymorphic functional languages for semi-structured data.},
booktitle = {Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
pages = {5–17},
numpages = {13},
keywords = {xml, intersection types, types, polymorphism},
location = {San Diego, California, USA},
series = {POPL '14}
}


@misc{javadoc,
  title={The Java language specification},
  author={Gosling, James and Joy, Bill and Steele, Guy and Bracha, Gilad and Buckley, Alex and Smith, Daniel and Bierman, Gavin},
  url={https://docs.oracle.com/javase/specs/jls/se14/html/index.html},
  year = {2021}
}

@article{routley1972semantics,
  title={The semantics of entailment—III},
  author={Routley, Richard and Meyer, Robert K},
  journal={Journal of philosophical logic},
  volume={1},
  number={2},
  pages={192--208},
  year={1972},
  publisher={Springer}
}

@techreport{van2000minimal,
  title={The minimal relevant logic and the call-by-value lambda calculus},
  author={van Bakel, Steffen and Dezani-Ciancaglini, Mariangiola and de’Liguoro, Ugo and Motohoma, Yoko},
  year={2000},
  institution={Citeseer}
}

@article{van1969report,
  title={Report on the algorithmic language ALGOL 68},
  author={Van Wijngaarden, Adriaan and Mailloux, Barry J and Peck, John EL and Koster, Cornelius HA and Sintzoff, M and Lindsey, CH and Meertens, LGLT and Fisker, RG},
  journal={Numerische Mathematik},
  volume={14},
  number={1},
  pages={79--218},
  year={1969},
  publisher={Springer}
}

@book{van2012revised,
  title={Revised report on the algorithmic language Algol 68},
  author={van Wijngaarden, Adriaan and Mailloux, Barry James and Peck, John Edward Lancelot and Koster, Cornelis HA and Lindsey, CH and Sintzoff, M and Meertens, Lambert GLT and Fisker, RG},
  year={2012},
  publisher={Springer Science \& Business Media}
}

@techreport{odersky2004overview,
  title={An overview of the Scala programming language},
  author={Odersky, Martin and Altherr, Philippe and Cremet, Vincent and Emir, Burak and Maneth, Sebastian and Micheloud, St{\'e}phane and Mihaylov, Nikolay and Schinz, Michel and Stenman, Erik and Zenger, Matthias},
  year={2004}
}

@article{chaudhuri2015flow,
  title={Flow: a static type checker for JavaScript},
  author={Chaudhuri, Avik},
  journal={SPLASH-I In Systems, Programming, Languages and Applications: Software for Humanity},
  year={2015}
}

@inproceedings{bierman2014understanding,
  title={Understanding typescript},
  author={Bierman, Gavin and Abadi, Mart{\'\i}n and Torgersen, Mads},
  booktitle={European Conference on Object-Oriented Programming},
  pages={257--281},
  year={2014},
  organization={Springer}
}

@misc{king2013ceylon,
  title={The Ceylon language specification, version 1.0},
  author={King, Gavin},
  year={2013},
  publisher={November}
}

@inproceedings{cartwright1991soft,
  title={Soft typing},
  author={Cartwright, Robert and Fagan, Mike},
  booktitle={Proceedings of the ACM SIGPLAN 1991 conference on Programming language design and implementation},
  pages={278--292},
  year={1991}
}

@book{pierce2002types,
author = {Pierce, Benjamin C.},
title = {Types and Programming Languages},
year = {2002},
isbn = {0262162091},
publisher = {The MIT Press},
edition = {1st}
}