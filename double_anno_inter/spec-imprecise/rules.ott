% key idea: keep the original annotation and the outermost one for lambdas
% new idea: drop u and r

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% METAVARIABLES

metavar var, x, y, f ::= {{ repr-locally-nameless }}

metavar i ::= {{ coq nat }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% GRAMMAR (LNgen portion)

grammar

  typ, A, B, C, D, Odd {{ tex \mathsf{Odd}  }}, Even {{ tex \mathsf{Even}  }}
                           :: 't_' ::=     {{ com type }}
    | Top                  ::   :: top {{ tex \top }}
    | Int                  ::   :: int     {{ tex \mathsf{Int}  }}
    | Bool                 ::   :: bool     {{ tex \mathsf{Bool}  }}
    | String               ::   :: str     {{ tex \mathsf{String}  }}
    | Char                 ::   :: char     {{ tex \mathsf{Char}  }}        
    | Bot                  ::   :: bot     {{ tex \bot }}
    | A -> B               ::   :: arrow
    | A \/ B 	             ::   :: union
    | A /\ B 			         ::   :: inter
    | ( A )                :: S :: paren   {{ coq ([[A]]) }}
    | statictype e         ::   :: statictype {{ tex \rceil [[e]] \lceil }}

  exp, e, v, p, w, 1 {{ tex 1 }}, 2 {{ tex 2 }}, 3 {{ tex 3 }}, p1 {{ tex +1 }}, neg {{ tex \mathsf{not} }}            
                           :: 'e_' ::=     {{ com expression }}
    | x                    ::   :: var
    | f                    ::   :: varf
    | i                    ::   :: lit
    | b                    ::   :: bexpr
    | s                    ::   :: strexpr
    | e : A                ::   :: ann
    | \ x . e              ::   :: abs     (+ bind x in e +)
    | \ f . e              ::   :: absf     (+ bind f in e +)
    | e1 e2                ::   :: app
    | switch e A e1 B e2   ::   :: switch {{ tex switch \ [[e]] \ \{(x:[[A]])[[->]][[e1]], (y:[[B]])[[->]][[e2]]\}  }}
    | ( e )                :: S :: paren   {{ coq ([[e]]) }}
    | e1 [ x ~> e2 ]       :: M :: subst   {{ coq (open_exp_wrt_exp [[x e1]] [[e2]]) }}
    | betavalue v A      ::   :: betavalue {{ tex [[v]] \mathbin{\lhd} [[A]] }}

substitutions
  single exp x   :: subst

freevars
  exp x      :: fv

parsing
  t_arrow right t_arrow

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% GRAMMAR  (non LNgen portion)

grammar

  ctx, G {{ tex \Gamma }} :: 'ctx_' ::=    {{ com typing context }}
                                           {{ coq list ( atom * typ ) }}
    | []                   ::  :: empty    {{ coq nil }} {{ tex \cdot }}
    | G , x : A            ::  :: cons     {{ coq (([[x]]~[[A]])++[[G]]) }}
    | G , y : A            ::  :: consy    {{ coq (([[y]]~[[A]])++[[G]]) }}
    | G , x : A , G1       ::  :: conss
    | G , G1               ::  :: consss


  dirflag {{ tex \Leftrightarrow }} :: '' ::=  {{ com typing direction }}
    | =>                   ::  :: infer    {{ tex \Rightarrow }}
    | <=                   ::  :: check    {{ tex \Leftarrow }}

terminals :: 'terminals_' ::=
  | \                    ::  :: lambda     {{ tex \lambda }}
  | -->                  ::  :: red        {{ tex \longrightarrow }}
  | ~>                   ::  :: leadsto    {{ tex \leadsto }}
  | ->                   ::  :: arrow      {{ tex \rightarrow }}
  | \/                   ::  :: or         {{ tex \vee }}
  | /\                   ::  :: and        {{ tex \wedge }}  
  | |-                   ::  :: turnstile  {{ tex \vdash }}
  | <:                   ::  :: sub        {{ tex \textless: }}
  | in                   ::  :: in         {{ tex \in }}
  | ;                    ::  :: ctxAnd     {{ tex ; }}
  | fv                   ::  :: fv         {{ tex \mathsf{fv}\! }}

formula :: 'formula_' ::=
  | judgement                ::   :: judgement
  | not formula              :: M :: not
    {{ tex \neg [[formula]] }}
    {{ coq not ([[formula]]) }}
  | uniq G                   ::   :: uniqG
    {{ coq uniq [[G]] }}
    {{ tex  }}
  | x : A in G               ::   :: inG
    {{ coq binds [[x]][[A]][[G]] }}
  | x notin fv e             ::   :: fresh
    {{ coq [[x]] \notin fv[[e]] }}
  | x notin dom G            ::   :: notInGx
    {{ coq ~ AtomSetImpl.In [[x]] (dom [[G]]) }}
    {{ tex [[x]] \notin [[G]] }}



defns
PreValue :: '' ::=
  
  defn
  prevalue e ::   :: pexpr :: 'pexpr_'
  {{ com PreValues }} 
  {{ tex  }}
  by

    ------------ :: int
    prevalue i

    ------------ :: bool
    prevalue b

    ------------ :: str
    prevalue s

    --------------------------- :: abs
    prevalue (\x.e):A -> B


defns
AValue :: '' ::=
  
  defn
  avalue e ::   :: avalue :: 'aval_'
  {{ com AValues }}
  {{ tex AValue \ \ [[e]] }}
  by

    prevalue p
    ------------ :: pval
    avalue p : A


defns
Value :: '' ::=
  
  defn
  value e ::   :: value :: 'val_'
  {{ com Values }}
  by

    avalue e
    ------------ :: aval
    value e

    -----------  :: abs 
     value \x.e


defns
FindType :: '' ::=
  
  defn
  findtype p A ::   :: findtype :: 'findtype_'
  {{ com DynamicType }}
  {{ tex [[A]] = \rfloor[[p]]\lfloor }}
  by

    ---------------- :: int
    findtype i Int

    ---------------- :: bool
    findtype b Bool

    ---------------- :: str
    findtype s String

    ------------------------------------ :: arrow
    findtype ((\x.e) : A -> B) (A -> B)


defns
FindSubTypes :: '' ::=
  
  defn
  findsubtypes A ::   :: fs :: 'fs_'
  {{ tex |[[A]]| }}
  {{ com FindSubTypes }}
  by


%% FindSubTypesEmpty needed for disj subtyping rule
defns
FindSubTypesEmpty :: '' ::=
  
  defn
  findsubtypesempty A ::   :: fse :: 'fse_'
  {{ tex |[[A]]| = \{\} }}
  by


defns
Ordinary :: '' ::=
  defn
  ordinary A ::  :: ordinary :: 'ord_'
  {{ tex Ord ~ [[A]] }}
  {{ com Ordinary Types }}
  by

  ---------------- :: int
  ordinary Int

  ---------------- :: bool
  ordinary Bool

  ---------------- :: str
  ordinary String


  ---------------- :: arrow
  ordinary A -> B


%  ordinary A
%  ordinary B
%  ---------------- :: union
%  ordinary A \/ B


% following definition is just to display A *s B
% No other use of this definition anywhere else
defns
DisjointnessSpec :: '' ::=

  defn
  A *s B ::  :: disjointnessspec :: ds_
  {{ tex [[A]] *_s [[B]] }}
  {{ com DisjointnessSpec }}

  by


% following definition is just to display BottomLikeSpec
% No other use of this definition anywhere else
defns
BottomLikeSpec :: '' ::=

  defn
  BottomLikeSpec A ::  :: btmlikespec :: bs_
  {{ tex \rfloor [[A]] \lfloor_s }}
  {{ com BottomLikeSpec }}

  by



defns
BottomLike :: '' ::=

  defn
  botlike A ::  :: bottomlike :: 'bl_'
  {{ tex \rfloor [[A]] \lfloor}}
  {{ com Bottom-Like Types }}
  by

    -------------------- :: bot
    botlike Bot

    botlike A
    botlike B
    -------------------------     :: or
    botlike A \/ B


    botlike A
    -------------------------     :: andl
    botlike A /\ B


    botlike B
    -------------------------     :: andr
    botlike A /\ B


    A * B
    -------------------------     :: anddisj
    botlike A /\ B


    not A <: B   
    not B <: A
    ---------------------------     :: andsub
    botlike A /\ B



defns
Disjointness :: '' ::=

  defn
  A * B ::  :: disjointness :: ad_
  {{ tex [[A]] *_a [[B]] }}
  {{ com Disjointness }}

  by

    -------------------- :: btmr
    A * Bot

    -------------------- :: btml
    Bot * A


%	botlike A
%	----------------------        :: btml
%	A * B


%	botlike B
%	----------------------        :: btmr
%	A * B

    -------------------- :: intl
    Int * A -> B
  
    -------------------- :: intr
    A -> B * Int

    A * C
    B * C
    -------------------------     :: orl
    A \/ B * C
  
    A * B
    A * C
    -------------------------     :: orr
    A * B \/ C

    A * C
    -------------------------     :: andla
    A /\ B * C

    B * C
    -------------------------     :: andlb
    A /\ B * C

    A * B
    -------------------------     :: andra
    A * B /\ C

    A * C
    -------------------------     :: andrb
    A * B /\ C

    
    findsubtypes (A /\ B)
    ------------------------- :: disjl
    A * B

    findsubtypes (B /\ A)
    ------------------------- :: disjr
    A * B


%    A * B
%    -------------------------     :: disjl
%    A /\ B * C


%    A * B
%    -------------------------     :: disjr
%    C * A /\ B

  


defns
Subtyping :: '' ::=

  defn
  A <: B ::  :: subtyping :: s_
  {{ com Subtyping }}
  {{ tex [[A]] <: [[B]] }}
  
  by

    -------------------- :: top
    A <: Top

    -------------------- :: bot
    Bot <: A
  
    -------------------- :: int
    Int <: Int

    -------------------- :: bool
    Bool <: Bool

    -------------------- :: str
    String <: String
  
    B1 <: A1 
    A2 <: B2
    -------------------------     :: arrow
    A1 -> A2 <: B1 -> B2
  
    A <: C
    B <: C
    -------------------------     :: ora
    A \/ B <: C
  
    A <: B
    -------------------------     :: orb
    A <: B \/ C 

    A <: C
    -------------------------     :: orc
    A <: B \/ C

    A <: B
    A <: C
    -------------------------     :: anda
    A <: B /\ C
  
    A <: C
    -------------------------     :: andb
    A /\ B <: C 

    B <: C
    -------------------------     :: andc
    A /\ B <: C

    findsubtypesempty A
    -------------------------      :: los
    A <: B

defns
DSubtyping :: '' ::=

  defn
  A <<: B ::  :: dsubtyping :: ds_
  {{ com Declarative Subtyping }}
  {{ tex [[A]] \ \underline{\textless} \ [[B]] }}
  
  by

    -------------------- :: refl
    A <<: A

    A <<: B
    B <<: C
    -------------------- :: trans
    A <<: C

    -------------------- :: top
    A <<: Top

    -------------------- :: btm
    Bot <<: A
  
    -------------------- :: int
    Int <<: Int
  
    B1 <<: A1 
    A2 <<: B2
    -------------------------     :: arrow
    A1 -> A2 <<: B1 -> B2
  
    A1 <<: A
    A2 <<: A
    -------------------------     :: ora
    A1 \/ A2 <<: A
  
    -------------------------     :: orb
    A1 <<: A1 \/ A2 

    -------------------------     :: orc
    A2 <<: A1 \/ A2

    A <<: A1
    A <<: A2
    -------------------------     :: anda
    A <<: A1 /\ A2
  
    -------------------------     :: andb
    A1 /\ A2 <<: A1 

    -------------------------     :: andc
    A1 /\ A2 <<: A2

    ----------------------------------------- :: distarr
    (A -> B1) /\ (A -> B2) <<: A -> (B1 /\ B2)

    ---------------------------------------- :: distarrrev
    A -> (B1 /\ B2) <<: (A -> B1) /\ (A -> B2)

    ----------------------------------------- :: distarru
    (A1 -> B) /\ (A2 -> B) <<: (A1 \/ A2) -> B

    ----------------------------------------- :: distarrurev
    (A1 \/ A2) -> B <<: (A1 -> B) /\ (A2 -> B)

    ----------------------------------------- :: distor
    (A1 \/ B) /\ (A2 \/ B) <<: (A1 /\ A2) \/ B

    ---------------------------------------- :: distand
    (A1 \/ A2) /\ B <<: (A1 /\ B) \/ (A2 /\ B)



defns
Typing :: '' ::=

  defn
  G |- e dirflag A ::   :: typing :: 'typ_'
  {{ com Typing Rules }}
  by

    % inference mode

    uniq G
    ----------------- :: int
    G |- i => Int

    uniq G
    ----------------- :: bool
    G |- b => Bool

    uniq G
    ----------------- :: str
    G |- s => String

    uniq G
    x : A in G
    -------------- :: var
    G |- x => A

    G |- e <= A
    ------------------ :: ann
    G |- e : A => A

    G |- e1 => A -> B
    G |- e2 <= A
    -------------------- :: app
    G |- e1 e2 => B

    % checking mode

    G |- e => B
    B <: A
    -------------- :: sub
    G |- e <= A

    G, x:A |- e <= B
    -------------------------- :: abs
    G |- \x. e <= A -> B

    G |- e <= A \/ B
    G, x : A |- e1 <= C
    G, y : B |- e2 <= C
    A *s B
    --------------------------------- :: switch
    G |- switch e A e1 B e2 <= C


defns
Reduction :: '' ::=

  defn
  e --> e' ::   :: step :: 'step_'
  {{ com Small-step operational semantics }}
  {{ tex [[e]] \longrightarrow [[e']] }}
  by

    e1 --> e1'
    ---------------- :: appl
    e1 e2 --> e1' e2


    e --> e'
    ---------------- :: appr
    v e --> v e'

    ---------------------------------------------------------------- :: beta
    ((\x.e):A->B) v --> (e [x ~> (betavalue v A)]):B


    e --> e'
    ----------------------- :: ann
    e : A --> e' : A


    prevalue p
    --------------------- :: rmann
    p : A --> p


    e --> e'
    ------------------------------------------------- :: switch
    switch e A e1 B e2 --> switch e' A e1 B e2


    prevalue p
    statictype p <: A
    ------------------------------------------------- :: switchl
    switch p A e1 B e2 --> e1 [x ~> p]


    prevalue p
    statictype p <: B
    ------------------------------------------------- :: switchr
    switch p A e1 B e2 --> e2 [y ~> p]